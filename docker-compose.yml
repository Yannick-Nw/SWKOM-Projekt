services:
  rabbitmq:
    build: ./RabbitMQ
    ports:
      - "5672:5672"       # RabbitMQ port
      - "9093:15672"     # Management interface
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
        - backend
  
  # Optional
  postgres-adminer:
    image: adminer
    ports:
      - 8082:8080
    networks:
      - backend
    restart: always

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: always

  webapi:
    build: ./WebApi
    depends_on:
      - postgres
      - minio  # Add MinIO dependency
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
    ports:
      - "8080:8080"
    networks:
      - frontend
      - backend
    restart: always
  
  webapp:
    build: ./WebApp
    depends_on:
      - webapi
    ports:
      - "80:80"
    volumes:
      - ./WebApp/nginx.conf:/etc/nginx/nginx.conf  # Binde die Nginx-Konfigurationsdatei ein
      - ./WebApp/html:/app/wwwroot  # Statische Dateien mounten
    networks:
      - frontend
    restart: always
  
  #  ocr-worker:
  #    build: ./OCRWorker
  #    depends_on:
  #      - rabbitmq
  #      - minio  # Add MinIO dependency
  #    environment:
  #      - RABBITMQ_HOST=rabbitmq
  #      - MINIO_URL=http://minio:9000
  #      - MINIO_ACCESS_KEY=minio
  #      - MINIO_SECRET_KEY=minio123
  #    networks:
  #      - backend
  
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"  # MinIO API
      - "9090:9090"  # MinIO Console
    environment:
      MINIO_ROOT_USER: minio      # Admin username
      MINIO_ROOT_PASSWORD: minio123  # Admin password
    command: server /data --console-address ":9090"
    volumes:
      - ./data/minio:/data  # Persistent storage
    networks:
      - backend

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge

volumes:
    postgres_data:   