services:
  elasticsearch:
    hostname: ${ELASTICSEARCH__HOST}
    image: elasticsearch:8.7.1
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "xpack.security.enabled=false"
      - "xpack.security.enrollment.enabled=false"
      - "logger.level=WARN"
    # ulimits:
    #   memlock:
    #     soft: -1
    #     hard: -1
    ports:
      - "${ELASTICSEARCH__PORT}:9200"
      - "9300:9300"
    networks:
      - backend
  
  # test elasticsearch with http://localhost:5601/app/dev_tools#/console
  kibana:
    image: docker.elastic.co/kibana/kibana:8.2.3
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://${ELASTICSEARCH__HOST}:${ELASTICSEARCH__PORT}
    networks:
      - backend
  
  minio:
    hostname: ${MINIO__HOST}
    image: minio/minio:latest
    ports:
        - "${MINIO__PORT}:9000"  # MinIO API
        - "9090:9090"  # MinIO UI
    environment:
        MINIO_ROOT_USER: ${MINIO__ACCESS_KEY}      # Admin username
        MINIO_ROOT_PASSWORD: ${MINIO__SECRET_KEY}  # Admin password
        MINIO_LOG_LEVEL: "debug"
    entrypoint: sh
    command: -c 'mkdir -p /data/documents && /usr/bin/minio server /data --console-address :9090'
    volumes:
        - .minio_data:/data  # Persistent storage
    networks:
        - backend

  ocr-worker:
    build:
      context: ./WebApi/OcrWorker
      additional_contexts:
        domain: ./WebApi/Domain
        application: ./WebApi/Application
        infrastructure: ./WebApi/Infrastructure
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      webapi:
        condition: service_started
    networks:
      - backend

  rabbitmq:
    hostname: ${RABBITMQ__HOST}
    build: ./RabbitMq
    ports:
      - "${RABBITMQ__PORT}:5672"       # RabbitMQ port
      - "9093:15672"     # Management interface
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ__USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ__PASS}
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 15s
      timeout: 30s
      retries: 5
    networks:
        - backend
  
  # Optional
  postgres-adminer:
    image: adminer
    ports:
      - "8082:8080"
    networks:
      - backend
    restart: always

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: always

  webapi:
    build: ./WebApi
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    env_file:
        - .env
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
      minio:
        condition: service_started
      elasticsearch:
        condition: service_started
    networks:
      - frontend
      - backend
    restart: always

  webapp:
    build: ./WebApp
    depends_on:
      - webapi
    ports:
      - "80:80"
    volumes:
      - ./WebApp/nginx.conf:/etc/nginx/nginx.conf  # Binde die Nginx-Konfigurationsdatei ein
      - ./WebApp/html:/app/wwwroot  # Statische Dateien mounten
    networks:
      - frontend
    restart: always

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge

volumes:
    postgres_data:
    minio_data: