services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"  # REST API
    networks:
      - backend
  
  minio:
    hostname: ${MINIO__HOST}
    image: minio/minio:latest
    ports:
        - "${MINIO__PORT}:9000"  # MinIO API
        - "9090:9090"  # MinIO UI
    environment:
        MINIO_ROOT_USER: ${MINIO__ACCESS_KEY}      # Admin username
        MINIO_ROOT_PASSWORD: ${MINIO__SECRET_KEY}  # Admin password
      # MINIO_LOG_LEVEL: "debug"
    entrypoint: sh
    command: -c 'mkdir -p /data/documents && /usr/bin/minio server /data --console-address :9090'
    volumes:
        - .minio_data:/data  # Persistent storage
    networks:
        - backend

  ocr-worker:
    build:
        context: ./WebApi/OcrWorker
        additional_contexts:
            domain: ./WebApi/Domain
            application: ./WebApi/Application
            infrastructure: ./WebApi/Infrastructure
    env_file:
      - .env
    environment:
      - ELASTICSEARCH_URI=${ELASTICSEARCH_URI}
    depends_on:
      webapi:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - backend

  rabbitmq:
    hostname: ${RABBITMQ__HOST}
    build: ./RabbitMq
    ports:
      - "${RABBITMQ__PORT}:5672"       # RabbitMQ port
      - "9093:15672"     # Management interface
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ__USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ__PASS}
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 15s
      timeout: 30s
      retries: 5
    networks:
        - backend
  
  # Optional
  postgres-adminer:
    image: adminer
    ports:
      - 8082:8080
    networks:
      - backend
    restart: always

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: always

  webapi:
    build: ./WebApi
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    env_file:
        - .env
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
      minio:
        condition: service_started
    networks:
      - frontend
      - backend
    restart: always

  webapp:
    build: ./WebApp
    depends_on:
      - webapi
    ports:
      - "80:80"
    volumes:
      - ./WebApp/nginx.conf:/etc/nginx/nginx.conf  # Binde die Nginx-Konfigurationsdatei ein
      - ./WebApp/html:/app/wwwroot  # Statische Dateien mounten
    networks:
      - frontend
    restart: always

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge

volumes:
    postgres_data:
    minio_data: