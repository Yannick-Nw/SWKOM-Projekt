services:
  minio:
    image: minio/minio:latest
    ports:
        - "9000:9000"  # MinIO API
        - "9090:9090"  # MinIO UI
    environment:
        MINIO_ROOT_USER: minio      # Admin username
        MINIO_ROOT_PASSWORD: minio123  # Admin password
    command: server /data --console-address ":9090"
    volumes:
        - .minio_data:/data  # Persistent storage
    networks:
        - backend

  ocr-worker:
    build:
        context: ./WebApi/OcrWorker
        additional_contexts:
            domain: ./WebApi/Domain
            application: ./WebApi/Application
            infrastructure: ./WebApi/Infrastructure
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      RABBITMQ_PORT: 5672
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    depends_on:
      webapi:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - backend

  rabbitmq:
    build: ./RabbitMq
    ports:
      - "5672:5672"       # RabbitMQ port
      - "9093:15672"     # Management interface
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 15s
      timeout: 30s
      retries: 5
    networks:
        - backend
  
  # Optional
  postgres-adminer:
    image: adminer
    ports:
      - 8082:8080
    networks:
      - backend
    restart: always

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: always

  webapi:
    build: ./WebApi
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
      minio:
        condition: service_started
    networks:
      - frontend
      - backend
    restart: always

  webapp:
    build: ./WebApp
    depends_on:
      - webapi
    ports:
      - "80:80"
    volumes:
      - ./WebApp/nginx.conf:/etc/nginx/nginx.conf  # Binde die Nginx-Konfigurationsdatei ein
      - ./WebApp/html:/app/wwwroot  # Statische Dateien mounten
    networks:
      - frontend
    restart: always

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge

volumes:
    postgres_data:
    minio_data: